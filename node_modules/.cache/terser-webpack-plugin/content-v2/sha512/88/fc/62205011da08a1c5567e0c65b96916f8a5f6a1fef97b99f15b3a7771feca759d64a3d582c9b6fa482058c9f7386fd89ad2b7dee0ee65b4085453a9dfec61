{"map":"{\"version\":3,\"sources\":[\"/Users/macbook/code/hse-tool/src/App.js\",\"/Users/macbook/code/hse-tool/src/serviceWorker.js\",\"/Users/macbook/code/hse-tool/src/index.js\"],\"names\":[\"App\",\"state\",\"values\",\"rand\",\"min\",\"max\",\"Math\",\"random\",\"exportF\",\"elem\",\"html\",\"document\",\"getElementById\",\"outerHTML\",\"url\",\"escape\",\"link\",\"createElement\",\"download\",\"href\",\"click\",\"handleSubmit\",\"event\",\"preventDefault\",\"minRef\",\"parseInt\",\"_this\",\"value\",\"maxRef\",\"rangeRef\",\"decimalRef\",\"result\",\"Object\",\"toConsumableArray\",\"Array\",\"map\",\"_\",\"i\",\"toFixed\",\"setState\",\"export\",\"assertThisInitialized\",\"_this2\",\"this\",\"react_default\",\"a\",\"className\",\"type\",\"ref\",\"input\",\"placeholder\",\"onClick\",\"id\",\"React\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"6QAyFeA,0NAlFbC,MAAQ,CACNC,OAAQ,MAGVC,KAAO,SAACC,EAAKC,GACX,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,KAGvCI,QAAU,SAACC,GACT,IACIC,EADQC,SAASC,eAAe,SACnBC,UACbC,EAAM,iCAAmCC,OAAOL,GAEhDM,EAAOL,SAASM,cAAc,KAClCD,EAAKE,SAAW,aAChBF,EAAKG,KAAOL,EAEZE,EAAKI,WAGPC,aAAe,SAAAC,GACbA,EAAMC,iBAEN,IAAMC,EAASC,SAASC,EAAKF,OAAOG,OAC9BC,EAASH,SAASC,EAAKE,OAAOD,OAC9BE,EAAWJ,SAASC,EAAKG,SAASF,OAClCG,EAAaL,SAASC,EAAKI,WAAWH,OAEtCI,EAASC,OAAAC,EAAA,EAAAD,CAAIE,MAAML,IAAWM,IAAI,SAACC,EAAGC,GAC1C,OAAOX,EAAKvB,KAAKqB,EAAQI,GAAQU,QAAQR,KAG3CJ,EAAKa,SAAS,CACZrC,OAAQ6B,OAKZS,OAAS,WACPd,EAAKlB,QAALwB,OAAAS,EAAA,EAAAT,CAAAN,6EAGO,IAAAgB,EAAAC,KAEHzC,EAASyC,KAAK1C,MAAMC,OAAOiC,IAAI,SAAAR,GAAK,OACtCiB,EAAAC,EAAA5B,cAAA,KAAA,KACE2B,EAAAC,EAAA5B,cAAA,KAAA,KAAKU,MAIT,OACEiB,EAAAC,EAAA5B,cAAA,MAAA,CAAK6B,UAAU,OAGbF,EAAAC,EAAA5B,cAAA,MAAA,KACE2B,EAAAC,EAAA5B,cAAA,MAAA,CAAK6B,UAAW,aACdF,EAAAC,EAAA5B,cAAA,QAAA,CAAO8B,KAAK,SAASC,IAAK,SAAAC,GAAK,OAAIP,EAAKlB,OAASyB,GAAOH,UAAW,cAAeI,YAAa,kBAE/FN,EAAAC,EAAA5B,cAAA,QAAA,CAAO8B,KAAK,SAASC,IAAK,SAAAC,GAAK,OAAIP,EAAKd,OAASqB,GAAOH,UAAW,cAAeI,YAAa,kBAE/FN,EAAAC,EAAA5B,cAAA,QAAA,CAAO8B,KAAK,SAASC,IAAK,SAAAC,GAAK,OAAIP,EAAKZ,WAAamB,GAAOH,UAAW,cAAeI,YAAa,YAEnGN,EAAAC,EAAA5B,cAAA,QAAA,CAAO8B,KAAK,SAASC,IAAK,SAAAC,GAAK,OAAIP,EAAKb,SAAWoB,GAAOH,UAAW,cAAeI,YAAa,wBAGnGN,EAAAC,EAAA5B,cAAA,SAAA,CAAQkC,QAASR,KAAKtB,aAAcyB,UAAW,yBAA/C,cAIFF,EAAAC,EAAA5B,cAAA,MAAA,CAAK6B,UAAU,UACbF,EAAAC,EAAA5B,cAAA,QAAA,CAAOmC,GAAG,SACJlD,IAIR0C,EAAAC,EAAA5B,cAAA,SAAA,CAAQkC,QAASR,KAAKH,OAAQM,UAAW,yBAAzC,oBA7EUO,EAAAA,EAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOjB,EAAAC,EAAA5B,cAAC6C,EAAD,MAASnD,SAASC,eAAe,SD2H3C,kBAAmBmD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nimport './App.css';\\n\\nimport { CSVLink } from \\\"react-csv\\\";\\n\\nclass App extends React.Component {\\n\\n  state = {\\n    values: []\\n  }\\n\\n  rand = (min, max) =>  {\\n    return Math.random() * (max - min) + min;\\n  }\\n\\n  exportF = (elem) => {\\n    var table = document.getElementById(\\\"table\\\");\\n    var html = table.outerHTML;\\n    var url = 'data:application/vnd.ms-excel,' + escape(html); // Set your html table into url\\n\\n    var link = document.createElement(\\\"a\\\");\\n    link.download = \\\"export.xls\\\";\\n    link.href = url;\\n\\n    link.click();\\n  }\\n\\n  handleSubmit = event => {\\n    event.preventDefault();\\n\\n    const minRef = parseInt(this.minRef.value);\\n    const maxRef = parseInt(this.maxRef.value);\\n    const rangeRef = parseInt(this.rangeRef.value);\\n    const decimalRef = parseInt(this.decimalRef.value);\\n\\n    const result = [...Array(rangeRef)].map((_, i) => {\\n      return this.rand(minRef, maxRef).toFixed(decimalRef);\\n    });\\n\\n    this.setState({\\n      values: result\\n    });\\n\\n  }\\n\\n  export = () => {\\n    this.exportF(this);\\n  }\\n\\n  render() {\\n\\n    let values = this.state.values.map(value => (\\n      <tr>\\n        <td>{value}</td>\\n      </tr>\\n    ))\\n\\n    return (\\n      <div className=\\\"App\\\">\\n\\n\\n        <div>\\n          <div className={\\\"formGroup\\\"}>\\n            <input type=\\\"number\\\" ref={input => this.minRef = input} className={\\\"formControl\\\"} placeholder={\\\"Minimum value\\\"} />\\n\\n            <input type=\\\"number\\\" ref={input => this.maxRef = input} className={\\\"formControl\\\"} placeholder={\\\"Maximum value\\\"} />\\n\\n            <input type=\\\"number\\\" ref={input => this.decimalRef = input} className={\\\"formControl\\\"} placeholder={\\\"Decimal\\\"} />\\n\\n            <input type=\\\"number\\\" ref={input => this.rangeRef = input} className={\\\"formControl\\\"} placeholder={\\\"Number to generate\\\"} />\\n          </div>\\n\\n          <button onClick={this.handleSubmit} className={\\\"button button_primary\\\"}> Compute </button>\\n        </div>\\n\\n\\n        <div className=\\\"result\\\">\\n          <table id=\\\"table\\\">\\n              { values }\\n          </table>\\n        </div>\\n\\n        <button onClick={this.export} className={\\\"button button_primary\\\"}> Export </button>\\n\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(e,t,n){e.exports=n(27)},18:function(e,t,n){},19:function(e,t,n){},27:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(5),l=n.n(o),c=(n(18),n(9)),u=n(6),i=n(7),m=n(10),s=n(8),p=n(1),f=n(11),d=(n(19),n(20),function(e){function t(){var e,n;Object(u.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(m.a)(this,(e=Object(s.a)(t)).call.apply(e,[this].concat(r)))).state={values:[]},n.rand=function(e,t){return Math.random()*(t-e)+e},n.exportF=function(e){var t=document.getElementById(\"table\").outerHTML,n=\"data:application/vnd.ms-excel,\"+escape(t),a=document.createElement(\"a\");a.download=\"export.xls\",a.href=n,a.click()},n.handleSubmit=function(e){e.preventDefault();var t=parseInt(n.minRef.value),a=parseInt(n.maxRef.value),r=parseInt(n.rangeRef.value),o=parseInt(n.decimalRef.value),l=Object(c.a)(Array(r)).map(function(e,r){return n.rand(t,a).toFixed(o)});n.setState({values:l})},n.export=function(){n.exportF(Object(p.a)(n))},n}return Object(f.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){var e=this,t=this.state.values.map(function(e){return r.a.createElement(\"tr\",null,r.a.createElement(\"td\",null,e))});return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(\"div\",null,r.a.createElement(\"div\",{className:\"formGroup\"},r.a.createElement(\"input\",{type:\"number\",ref:function(t){return e.minRef=t},className:\"formControl\",placeholder:\"Minimum value\"}),r.a.createElement(\"input\",{type:\"number\",ref:function(t){return e.maxRef=t},className:\"formControl\",placeholder:\"Maximum value\"}),r.a.createElement(\"input\",{type:\"number\",ref:function(t){return e.decimalRef=t},className:\"formControl\",placeholder:\"Decimal\"}),r.a.createElement(\"input\",{type:\"number\",ref:function(t){return e.rangeRef=t},className:\"formControl\",placeholder:\"Number to generate\"})),r.a.createElement(\"button\",{onClick:this.handleSubmit,className:\"button button_primary\"},\" Compute \")),r.a.createElement(\"div\",{className:\"result\"},r.a.createElement(\"table\",{id:\"table\"},t)),r.a.createElement(\"button\",{onClick:this.export,className:\"button button_primary\"},\" Export \"))}}]),t}(r.a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(r.a.createElement(d,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[12,1,2]]]);","extractedComments":[]}