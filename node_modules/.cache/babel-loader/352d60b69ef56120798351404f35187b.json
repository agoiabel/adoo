{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/code/hse-tool/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { CSVLink } from \"react-csv\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      values: []\n    };\n\n    this.rand = (min, max) => {\n      return Math.random() * (max - min) + min;\n    };\n\n    this.exportF = elem => {\n      var table = document.getElementById(\"table\");\n      var html = table.outerHTML;\n      var url = 'data:application/vnd.ms-excel,' + escape(html); // Set your html table into url\n\n      var link = document.createElement(\"a\");\n      link.download = \"export.xls\";\n      link.href = uri;\n      link.click();\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const minRef = parseInt(this.minRef.value);\n      const maxRef = parseInt(this.maxRef.value);\n      const rangeRef = parseInt(this.rangeRef.value);\n      const decimalRef = parseInt(this.decimalRef.value);\n      const result = [...Array(rangeRef)].map((_, i) => {\n        return this.rand(minRef, maxRef).toFixed(decimalRef);\n      });\n      this.setState({\n        values: result\n      });\n    };\n\n    this.export = () => {\n      this.exportF(this);\n    };\n  }\n\n  render() {\n    let values = this.state.values.map(value => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, value)));\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"formGroup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      ref: input => this.minRef = input,\n      className: \"formControl\",\n      placeholder: \"Minimum value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      ref: input => this.maxRef = input,\n      className: \"formControl\",\n      placeholder: \"Maximum value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      ref: input => this.rangeRef = input,\n      className: \"formControl\",\n      placeholder: \"Range\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      ref: input => this.decimalRef = input,\n      className: \"formControl\",\n      placeholder: \"Decimal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this.handleSubmit,\n      className: \"button button_primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \" Compute \")), React.createElement(\"div\", {\n      className: \"result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      id: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, values)), React.createElement(\"button\", {\n      onClick: this.export,\n      className: \"button button_primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \" Export \"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/macbook/code/hse-tool/src/App.js"],"names":["React","CSVLink","App","Component","state","values","rand","min","max","Math","random","exportF","elem","table","document","getElementById","html","outerHTML","url","escape","link","createElement","download","href","uri","click","handleSubmit","event","preventDefault","minRef","parseInt","value","maxRef","rangeRef","decimalRef","result","Array","map","_","i","toFixed","setState","export","render","input"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { CSVLink } from \"react-csv\";\n\nclass App extends React.Component {\n\n  state = {\n    values: []\n  }\n\n  rand = (min, max) =>  {\n    return Math.random() * (max - min) + min;\n  }\n\n  exportF = (elem) => {\n    var table = document.getElementById(\"table\");\n    var html = table.outerHTML;\n    var url = 'data:application/vnd.ms-excel,' + escape(html); // Set your html table into url\n\n    var link = document.createElement(\"a\");\n    link.download = \"export.xls\";\n    link.href = uri;\n\n    link.click();\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const minRef = parseInt(this.minRef.value);\n    const maxRef = parseInt(this.maxRef.value);\n    const rangeRef = parseInt(this.rangeRef.value);\n    const decimalRef = parseInt(this.decimalRef.value);\n\n    const result = [...Array(rangeRef)].map((_, i) => {\n      return this.rand(minRef, maxRef).toFixed(decimalRef);\n    });\n\n    this.setState({\n      values: result\n    });\n\n  }\n\n  export = () => {\n    this.exportF(this);\n  }\n\n  render() {\n\n    let values = this.state.values.map(value => (\n      <tr>\n        <td>{value}</td>\n      </tr>\n    ))\n\n    return (\n      <div className=\"App\">\n\n\n        <div>\n          <div className={\"formGroup\"}>\n            <input type=\"number\" ref={input => this.minRef = input} className={\"formControl\"} placeholder={\"Minimum value\"} />\n\n            <input type=\"number\" ref={input => this.maxRef = input} className={\"formControl\"} placeholder={\"Maximum value\"} />\n\n            <input type=\"number\" ref={input => this.rangeRef = input} className={\"formControl\"} placeholder={\"Range\"} />\n\n            <input type=\"number\" ref={input => this.decimalRef = input} className={\"formControl\"} placeholder={\"Decimal\"} />\n          </div>\n\n          <button onClick={this.handleSubmit} className={\"button button_primary\"}> Compute </button>\n        </div>\n\n\n        <div className=\"result\">\n          <table id=\"table\">\n              { values }\n          </table>\n        </div>\n\n        <button onClick={this.export} className={\"button button_primary\"}> Export </button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}